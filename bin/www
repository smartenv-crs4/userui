#!/usr/bin/env node
var debug = require('debug')('caport2020User-WebUIMicroservice');
var request=require("request");
var properties = require('propertiesmanager').conf;
var _=require("underscore");

var authMsUrl  = properties.authUrl; //"http://seidue.crs4.it/api/user/v1/";



// var app = require('../app');


// db.connect(function(err){
//
//   if(err){
//     console.log("Unable to connect to DB, err:" +err);
//   }
//   else{
//     console.log("Connected to DB");
//
//   }
//
// });

var app = require('../app');
app.set('port', process.env.PORT || 3011);
var server;


var rqparams = {
    url:  authMsUrl + '/usertypes?skip=-1&limit=-1',
    headers: {'Authorization': "Bearer " + properties.myMicroserviceToken},
};


//console.log("°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°" +properties.MyMicroserviceToken);


request.get(rqparams, function (error, response, body) {
if(error){
    return console.log("ERROR:"+ error);
}

if(_.isEmpty(body)){
    return console.log("ERROR: SERVER IS NOT LISTENING DUE TO DEFAULT USER " + properties.defaultUserType + " IS NOT DEFINED IN AUTHMS");
}else{

    var bodyJson=JSON.parse(body);

    if(_.isEmpty(bodyJson.userandapptypes)){
        return console.log("ERROR: " + body) ;
    }else{
        var userTypesList=bodyJson.userandapptypes;
        var defaulFind=_.find(userTypesList, function(tokenType){ return properties.defaultUserType==tokenType.name; });
        if(_.isEmpty(defaulFind)){
            return console.log("ERROR: SERVER IS NOT LISTENING DUE TO DEFAULT USER " + properties.defaultUserType + " IS NOT A VALID USER DEFINED IN AUTHMS -->" + body);
        }else{
            if (process.env.ENABLEHTTPS ){
                app.set('port', 443);
                //How to run Express over HTTPS
                var https = require('https');
                var fs = require('fs');

                var options = {
                    key : fs.readFileSync('keys/key.pem'),
                    cert : fs.readFileSync('keys/key-cert.pem')
                }
                server = https.createServer(options, app).listen(app.get('port'), function() {
                    debug('Express server listening on port ' + server.address().port);
                    console.log('Express server HTTPS listening on port ' + server.address().port);
                });
            }else {

                server = app.listen(app.get('port'), function () {
                    console.log('Express server listening on port ' + server.address().port);
                    debug('Express server listening on port ' + server.address().port);
                });
            }
        }
    }
}
});





// process.on('SIGINT', function(code) {
//     console.log("Exiting MS...");
//     db.disconnect(function(err,result){
//
//     if(err){
//         console.log('Unable to disconnect from database');
//     }
//
//     else{
//         console.log('Disconnected from database');
//     }
//
//
//     process.exit(0);
//     });
//
// });






